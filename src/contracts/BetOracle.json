{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_participants",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_participantCount",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_date",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum OracleInterface.SportKind",
          "name": "_kind",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum OracleInterface.EventOutcome",
          "name": "_eventOutcome",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int8",
          "name": "_winner",
          "type": "int8"
        }
      ],
      "name": "SportEventAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_participants",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_participantCount",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_date",
          "type": "uint256"
        },
        {
          "internalType": "enum OracleInterface.SportKind",
          "name": "_kind",
          "type": "uint8"
        }
      ],
      "name": "addSportEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        },
        {
          "internalType": "enum OracleInterface.EventOutcome",
          "name": "_outcome",
          "type": "uint8"
        },
        {
          "internalType": "int8",
          "name": "_winner",
          "type": "int8"
        }
      ],
      "name": "declareOutcome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        }
      ],
      "name": "eventExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSportEvents",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_eventId",
          "type": "bytes32"
        }
      ],
      "name": "getEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "participants",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "participantCount",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "enum OracleInterface.SportKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "enum OracleInterface.EventOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "int8",
          "name": "winner",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pending",
          "type": "bool"
        }
      ],
      "name": "getLatestEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "participants",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "participantCount",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "enum OracleInterface.SportKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "enum OracleInterface.EventOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "int8",
          "name": "winner",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingEvents",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testConnection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x533ec11c26e80aabcb66dc42e7cea6b0ecba5c5f775cfb34d5a40e2f404dae98",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1991377",
    "logsBloom": "0x
    "blockHash": "0xf9f20af03b8c04d10864779a647992167d232a46be9ecddd4ced6848f07abbea",
    "transactionHash": "0x533ec11c26e80aabcb66dc42e7cea6b0ecba5c5f775cfb34d5a40e2f404dae98",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x533ec11c26e80aabcb66dc42e7cea6b0ecba5c5f775cfb34d5a40e2f404dae98",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf9f20af03b8c04d10864779a647992167d232a46be9ecddd4ced6848f07abbea"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "1991377",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cc781f420f01e99c34b4728e710065fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_participants\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_participantCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum OracleInterface.SportKind\",\"name\":\"_kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum OracleInterface.EventOutcome\",\"name\":\"_eventOutcome\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"_winner\",\"type\":\"int8\"}],\"name\":\"SportEventAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_participants\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_participantCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"},{\"internalType\":\"enum OracleInterface.SportKind\",\"name\":\"_kind\",\"type\":\"uint8\"}],\"name\":\"addSportEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"},{\"internalType\":\"enum OracleInterface.EventOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"_winner\",\"type\":\"int8\"}],\"name\":\"declareOutcome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"}],\"name\":\"eventExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSportEvents\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_eventId\",\"type\":\"bytes32\"}],\"name\":\"getEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"participants\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"participantCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"enum OracleInterface.SportKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum OracleInterface.EventOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"winner\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pending\",\"type\":\"bool\"}],\"name\":\"getLatestEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"participants\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"participantCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"enum OracleInterface.SportKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"enum OracleInterface.EventOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"winner\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingEvents\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testConnection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"SportEventAdded(bytes32,string,string,uint8,uint256,uint8,uint8,int8)\":{\"details\":\"Triggered once an event has been added\"}},\"kind\":\"dev\",\"methods\":{\"addSportEvent(string,string,uint8,uint256,uint8)\":{\"params\":{\"_date\":\"date set for the sport event\",\"_kind\":\"kind of the sport (e.g. soccer/rugby/basketball)\",\"_name\":\"descriptive name for the sport event (e.g. Pac vs. Mayweather 2016)\",\"_participantCount\":\"number of participants\",\"_participants\":\"|-delimited string of participants names (e.g. \\\"Montpellier|Monaco\\\")\"},\"returns\":{\"_0\":\"the unique id of the newly created sport event\"}},\"declareOutcome(bytes32,uint8,int8)\":{\"params\":{\"_eventId\":\"unique id of the match to modify\",\"_outcome\":\"outcome of the match\",\"_winner\":\"0-based id of the winnner\"}},\"eventExists(bytes32)\":{\"params\":{\"_eventId\":\"the id of a sport event id\"},\"returns\":{\"_0\":\"true if sport event exists and its id is valid\"}},\"getAddress()\":{\"returns\":{\"_0\":\"the address of the BetOracle smart-contract\"}},\"getAllSportEvents()\":{\"returns\":{\"_0\":\"an array of unique match ids\"}},\"getEvent(bytes32)\":{\"params\":{\"_eventId\":\"the unique id of the desired event\"},\"returns\":{\"date\":\"when the event takes place\",\"id\":\"  the id of the event\",\"kind\":\"what is sport kind\",\"name\":\"the name of the event\",\"outcome\":\"an integer that represents the event outcome\",\"participantCount\":\"the number of the event's participants\",\"participants\":\"a string with the name of the event's participants separated with a pipe symbol ('|')\",\"winner\":\"the index of the winner\"}},\"getPendingEvents()\":{\"returns\":{\"_0\":\"an array of unique pending events ids\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"testConnection()\":{\"returns\":{\"_0\":\"true, unconditionally\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"events\":{\"details\":\"all the sport events\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSportEvent(string,string,uint8,uint256,uint8)\":{\"notice\":\"Add a new pending sport event into the blockchain\"},\"declareOutcome(bytes32,uint8,int8)\":{\"notice\":\"Sets the outcome of a predefined match, permanently on the blockchain\"},\"eventExists(bytes32)\":{\"notice\":\"Determines whether a sport event exists with the given id\"},\"getAddress()\":{\"notice\":\"gets the address of this contract\"},\"getAllSportEvents()\":{\"notice\":\"gets the unique ids of events, pending and decided, in reverse chronological order\"},\"getEvent(bytes32)\":{\"notice\":\"gets the specified sport event and return its data\"},\"getPendingEvents()\":{\"notice\":\"gets the unique ids of all pending events, in reverse chronological order\"},\"testConnection()\":{\"notice\":\"can be used by a client contract to ensure that they've connected to this contract interface successfully\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BetOracle.sol\":\"BetOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/BetOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./OracleInterface.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract BetOracle is OracleInterface, Ownable, ReentrancyGuard {\\r\\n\\r\\n    /**\\r\\n     * @dev all the sport events\\r\\n     */\\r\\n    SportEvent[] events;\\r\\n\\r\\n    /*\\r\\n     * @dev map of composed {eventId (SHA3 of event key infos) => eventIndex (in events)} pairs\\r\\n     */\\r\\n    mapping(bytes32 => uint) eventIdToIndex;\\r\\n\\r\\n    /***\\r\\n      * @dev defines a sport event along with its outcome\\r\\n      */\\r\\n    struct SportEvent {\\r\\n        bytes32      id;\\r\\n        string       name;\\r\\n        string       participants;\\r\\n        uint8        participantCount;\\r\\n        uint         date;\\r\\n        SportKind    kind;\\r\\n        EventOutcome outcome;\\r\\n        int8         winner;\\r\\n    }\\r\\n\\r\\n    // enum EventOutcome is defind in OracleInterface\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered once an event has been added\\r\\n     */\\r\\n    event SportEventAdded(\\r\\n        bytes32      _eventId,\\r\\n        string       _name,\\r\\n        string       _participants,\\r\\n        uint8        _participantCount,\\r\\n        uint         _date,\\r\\n        SportKind    _kind,\\r\\n        EventOutcome _eventOutcome,\\r\\n        int8         _winner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Add a new pending sport event into the blockchain\\r\\n     * @param _name descriptive name for the sport event (e.g. Pac vs. Mayweather 2016)\\r\\n     * @param _participants |-delimited string of participants names (e.g. \\\"Montpellier|Monaco\\\")\\r\\n     * @param _participantCount number of participants\\r\\n     * @param _date date set for the sport event\\r\\n     * @param _kind kind of the sport (e.g. soccer/rugby/basketball)\\r\\n     * @return the unique id of the newly created sport event\\r\\n     */\\r\\n    function addSportEvent(\\r\\n        string memory _name,\\r\\n        string memory _participants,\\r\\n        uint8         _participantCount,\\r\\n        uint          _date,\\r\\n        SportKind     _kind\\r\\n    )\\r\\n        public onlyOwner nonReentrant\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        bytes memory bytesName = bytes(_name);\\r\\n        require(bytesName.length > 0, \\\"_name cannot be empty\\\");\\r\\n        require(\\r\\n            _date >= block.timestamp + 1 weeks,\\r\\n            \\\"_date must be >= 1 week from now\\\"\\r\\n        );\\r\\n\\r\\n        // Hash key fields of the sport event to get a unique id\\r\\n        bytes32 eventId = keccak256(abi.encodePacked(_name, _participantCount, _date, _kind));\\r\\n\\r\\n        // Make sure that the sport event is unique and does not exist yet\\r\\n        require(!eventExists(eventId), \\\"Event already exists\\\");\\r\\n\\r\\n        // Add the sport event\\r\\n        events.push(\\r\\n            SportEvent(eventId, _name, _participants, _participantCount, _date, _kind, EventOutcome.Pending, -1)\\r\\n        );\\r\\n        uint newIndex           = events.length - 1;\\r\\n        eventIdToIndex[eventId] = newIndex + 1;\\r\\n\\r\\n        emit SportEventAdded(\\r\\n            eventId,\\r\\n            _name,\\r\\n            _participants,\\r\\n            _participantCount,\\r\\n            _date,\\r\\n            _kind,\\r\\n            EventOutcome.Pending,\\r\\n            -1                      // no winner yet\\r\\n        );\\r\\n\\r\\n        // Return the unique id of the new sport event\\r\\n        return eventId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the array index of the sport event with the given id\\r\\n     * @dev if the event id is invalid, then the return value will be incorrect and may cause error; you must call eventExists(_eventId) first!\\r\\n     * @param _eventId the sport event id to get\\r\\n     * @return the array index of this event if it exists or else -1\\r\\n     */\\r\\n    function _getMatchIndex(bytes32 _eventId)\\r\\n        private view\\r\\n        returns (uint)\\r\\n    {\\r\\n        return eventIdToIndex[_eventId] - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determines whether a sport event exists with the given id\\r\\n     * @param _eventId the id of a sport event id\\r\\n     * @return true if sport event exists and its id is valid\\r\\n     */\\r\\n    function eventExists(bytes32 _eventId)\\r\\n        public view override\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (events.length == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        uint index = eventIdToIndex[_eventId];\\r\\n        return (index > 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the outcome of a predefined match, permanently on the blockchain\\r\\n     * @param _eventId unique id of the match to modify\\r\\n     * @param _outcome outcome of the match\\r\\n     * @param _winner 0-based id of the winnner\\r\\n     */\\r\\n    function declareOutcome(bytes32 _eventId, EventOutcome _outcome, int8 _winner)\\r\\n        onlyOwner external\\r\\n    {\\r\\n        // Require that it exists\\r\\n        require(eventExists(_eventId));\\r\\n\\r\\n        // Get the event\\r\\n        uint index = _getMatchIndex(_eventId);\\r\\n        SportEvent storage theMatch = events[index];\\r\\n\\r\\n        if (_outcome == EventOutcome.Decided)\\r\\n            require(_winner >= 0 && theMatch.participantCount > uint8(_winner));\\r\\n\\r\\n        // Set the outcome\\r\\n        theMatch.outcome = _outcome;\\r\\n\\r\\n        // Set the winner (if there is one)\\r\\n        if (_outcome == EventOutcome.Decided)\\r\\n            theMatch.winner = _winner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice gets the unique ids of all pending events, in reverse chronological order\\r\\n     * @return an array of unique pending events ids\\r\\n     */\\r\\n    function getPendingEvents()\\r\\n        public view override\\r\\n        returns (bytes32[] memory)\\r\\n    {\\r\\n        uint count = 0;\\r\\n\\r\\n        // Get the count of pending events\\r\\n        for (uint i = 0; i < events.length; i = i + 1) {\\r\\n            if (events[i].outcome == EventOutcome.Pending)\\r\\n                count = count + 1;\\r\\n        }\\r\\n\\r\\n        // Collect up all the pending events\\r\\n        bytes32[] memory output = new bytes32[](count);\\r\\n\\r\\n        if (count > 0) {\\r\\n            uint index = 0;\\r\\n            for (uint n = events.length;  n > 0;  n = n - 1) {\\r\\n                if (events[n - 1].outcome == EventOutcome.Pending) {\\r\\n                    output[index] = events[n - 1].id;\\r\\n                    index = index + 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice gets the unique ids of events, pending and decided, in reverse chronological order\\r\\n     * @return an array of unique match ids\\r\\n     */\\r\\n    function getAllSportEvents()\\r\\n        public view override\\r\\n        returns (bytes32[] memory)\\r\\n    {\\r\\n        bytes32[] memory eventIds = new bytes32[](events.length);\\r\\n\\r\\n        // Collect all event ids\\r\\n        if (events.length > 0) {\\r\\n            uint index = 0;\\r\\n            for (uint n = events.length; n > 0; n = n - 1) {\\r\\n                eventIds[index = index + 1] = events[n - 1].id;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return eventIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice gets the specified sport event and return its data\\r\\n     * @param _eventId the unique id of the desired event\\r\\n     * @return id   the id of the event\\r\\n     * @return name the name of the event\\r\\n     * @return participants a string with the name of the event's participants separated with a pipe symbol ('|')\\r\\n     * @return participantCount the number of the event's participants\\r\\n     * @return date when the event takes place\\r\\n     * @return kind what is sport kind\\r\\n     * @return outcome an integer that represents the event outcome\\r\\n     * @return winner the index of the winner\\r\\n     */\\r\\n    function getEvent(bytes32 _eventId)\\r\\n        public view override\\r\\n        returns (\\r\\n            bytes32       id,\\r\\n            string memory name,\\r\\n            string memory participants,\\r\\n            uint8         participantCount,\\r\\n            uint          date,\\r\\n            SportKind     kind,\\r\\n            EventOutcome  outcome,\\r\\n            int8          winner\\r\\n        )\\r\\n    {\\r\\n        // Get the sport event\\r\\n        if (eventExists(_eventId)) {\\r\\n            SportEvent storage theMatch = events[_getMatchIndex(_eventId)];\\r\\n            return (theMatch.id, theMatch.name, theMatch.participants, theMatch.participantCount, theMatch.date, theMatch.kind, theMatch.outcome, theMatch.winner);\\r\\n        }\\r\\n        else {\\r\\n            return (_eventId, \\\"\\\", \\\"\\\", 0, 0, SportKind.Soccer, EventOutcome.Pending, -1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function getLatestEvent(bool _pending)\\r\\n        public view override\\r\\n        returns (\\r\\n            bytes32         id,\\r\\n            string memory   name,\\r\\n            string memory   participants,\\r\\n            uint8           participantCount,\\r\\n            uint            date,\\r\\n            SportKind       kind,\\r\\n            EventOutcome    outcome,\\r\\n            int8            winner\\r\\n        )\\r\\n    {\\r\\n        bytes32          eventId = 0;\\r\\n        bytes32[] memory ids;\\r\\n\\r\\n        if (_pending) {\\r\\n            ids = getPendingEvents();\\r\\n        } else {\\r\\n            ids = getAllSportEvents();\\r\\n        }\\r\\n        if (ids.length > 0) {\\r\\n            eventId = ids[0];\\r\\n        }\\r\\n\\r\\n        // Return a null sport event by default\\r\\n        return getEvent(eventId);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice gets the address of this contract\\r\\n     * @return the address of the BetOracle smart-contract\\r\\n     */\\r\\n    function getAddress()\\r\\n        public view\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice can be used by a client contract to ensure that they've connected to this contract interface successfully\\r\\n     * @return true, unconditionally\\r\\n     */\\r\\n    function testConnection()\\r\\n        public pure override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc32d3694aa2e9e2a14c1c7866c252cd7a464b3a49f0ba54bf2c5fd3fe697f8bf\",\"license\":\"MIT\"},\"contracts/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title The interface for the events Oracle (`BetOracle`)\\r\\n * @notice Declares the functions that the `BetOracle` contract exposes externally\\r\\n */\\r\\ninterface OracleInterface {\\r\\n\\r\\n\\r\\n    enum EventOutcome {\\r\\n        Pending,    //match has not been fought to decision\\r\\n        Underway,   //match has started & is underway\\r\\n        Draw,       //anything other than a clear winner (e.g. cancelled)\\r\\n        Decided     //index of participant who is the winner\\r\\n    }\\r\\n\\r\\n    enum SportKind {\\r\\n        Soccer,\\r\\n        Rugby,\\r\\n        Basketball\\r\\n    }\\r\\n\\r\\n    function eventExists(bytes32 _eventId)\\r\\n        external view returns (bool);\\r\\n\\r\\n    function getPendingEvents()\\r\\n        external view returns (bytes32[] memory);\\r\\n\\r\\n    function getAllSportEvents()\\r\\n        external view returns (bytes32[] memory);\\r\\n\\r\\n    function getEvent(bytes32 _eventId)\\r\\n        external view returns (\\r\\n            bytes32       id,\\r\\n            string memory name,\\r\\n            string memory participants,\\r\\n            uint8         participantCount,\\r\\n            uint          date,\\r\\n            SportKind     kind,\\r\\n            EventOutcome  outcome,\\r\\n            int8          winner\\r\\n        );\\r\\n\\r\\n    function getLatestEvent(bool _pending)\\r\\n        external view returns (\\r\\n            bytes32       id,\\r\\n            string memory name,\\r\\n            string memory participants,\\r\\n            uint8          participantCount,\\r\\n            uint          date,\\r\\n            SportKind     kind,\\r\\n            EventOutcome  outcome,\\r\\n            int8          winner\\r\\n        );\\r\\n\\r\\n    function testConnection()\\r\\n        external pure returns (bool);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x999fe1d63506e2a33cddf442f79aa07bca1ee7ebe48988a1ecb600389feaf068\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "SportEventAdded(bytes32,string,string,uint8,uint256,uint8,uint8,int8)": {
        "details": "Triggered once an event has been added"
      }
    },
    "kind": "dev",
    "methods": {
      "addSportEvent(string,string,uint8,uint256,uint8)": {
        "params": {
          "_date": "date set for the sport event",
          "_kind": "kind of the sport (e.g. soccer/rugby/basketball)",
          "_name": "descriptive name for the sport event (e.g. Pac vs. Mayweather 2016)",
          "_participantCount": "number of participants",
          "_participants": "|-delimited string of participants names (e.g. \"Montpellier|Monaco\")"
        },
        "returns": {
          "_0": "the unique id of the newly created sport event"
        }
      },
      "declareOutcome(bytes32,uint8,int8)": {
        "params": {
          "_eventId": "unique id of the match to modify",
          "_outcome": "outcome of the match",
          "_winner": "0-based id of the winnner"
        }
      },
      "eventExists(bytes32)": {
        "params": {
          "_eventId": "the id of a sport event id"
        },
        "returns": {
          "_0": "true if sport event exists and its id is valid"
        }
      },
      "getAddress()": {
        "returns": {
          "_0": "the address of the BetOracle smart-contract"
        }
      },
      "getAllSportEvents()": {
        "returns": {
          "_0": "an array of unique match ids"
        }
      },
      "getEvent(bytes32)": {
        "params": {
          "_eventId": "the unique id of the desired event"
        },
        "returns": {
          "date": "when the event takes place",
          "id": "  the id of the event",
          "kind": "what is sport kind",
          "name": "the name of the event",
          "outcome": "an integer that represents the event outcome",
          "participantCount": "the number of the event's participants",
          "participants": "a string with the name of the event's participants separated with a pipe symbol ('|')",
          "winner": "the index of the winner"
        }
      },
      "getPendingEvents()": {
        "returns": {
          "_0": "an array of unique pending events ids"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "testConnection()": {
        "returns": {
          "_0": "true, unconditionally"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "events": {
        "details": "all the sport events"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSportEvent(string,string,uint8,uint256,uint8)": {
        "notice": "Add a new pending sport event into the blockchain"
      },
      "declareOutcome(bytes32,uint8,int8)": {
        "notice": "Sets the outcome of a predefined match, permanently on the blockchain"
      },
      "eventExists(bytes32)": {
        "notice": "Determines whether a sport event exists with the given id"
      },
      "getAddress()": {
        "notice": "gets the address of this contract"
      },
      "getAllSportEvents()": {
        "notice": "gets the unique ids of events, pending and decided, in reverse chronological order"
      },
      "getEvent(bytes32)": {
        "notice": "gets the specified sport event and return its data"
      },
      "getPendingEvents()": {
        "notice": "gets the unique ids of all pending events, in reverse chronological order"
      },
      "testConnection()": {
        "notice": "can be used by a client contract to ensure that they've connected to this contract interface successfully"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BetOracle.sol:BetOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/BetOracle.sol:BetOracle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1269,
        "contract": "contracts/BetOracle.sol:BetOracle",
        "label": "events",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(SportEvent)1292_storage)dyn_storage"
      },
      {
        "astId": 1273,
        "contract": "contracts/BetOracle.sol:BetOracle",
        "label": "eventIdToIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SportEvent)1292_storage)dyn_storage": {
        "base": "t_struct(SportEvent)1292_storage",
        "encoding": "dynamic_array",
        "label": "struct BetOracle.SportEvent[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(EventOutcome)2187": {
        "encoding": "inplace",
        "label": "enum OracleInterface.EventOutcome",
        "numberOfBytes": "1"
      },
      "t_enum(SportKind)2191": {
        "encoding": "inplace",
        "label": "enum OracleInterface.SportKind",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SportEvent)1292_storage": {
        "encoding": "inplace",
        "label": "struct BetOracle.SportEvent",
        "members": [
          {
            "astId": 1275,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1277,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1279,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "participants",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1281,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "participantCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1283,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "date",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1286,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "kind",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(SportKind)2191"
          },
          {
            "astId": 1289,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "outcome",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(EventOutcome)2187"
          },
          {
            "astId": 1291,
            "contract": "contracts/BetOracle.sol:BetOracle",
            "label": "winner",
            "offset": 2,
            "slot": "5",
            "type": "t_int8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}